type Criteria {
  id: ID
  text: String
  key: String
  icon: String
}
type User {
  id: ID
  name: String
  email: String
  role: UserRole
}
type Company {
  id: ID
  name: String
  ceo_name: String
  url: String
  email: String
  telephone: String
}
type Token {
  token: String
}
enum UserRole {
  ADMIN
  INVESTOR
}
type Query {
  # Hello World Query in GraphQL
  helloGraphQL: String
  # Criteria queries
  """ Get criterias """
  getCriterias(limit: Int, offset: Int): [Criteria]
  # User queries
  obtainUser: User
}
input CriteriaInput {
  id: ID
  text: String!
  key: String!
  icon: String
}
input UserInput {
  id: ID
  name: String!
  email: String!
  password: String!
  role: UserRole!
}
type Mutation {
  # Criteria mutations
  """ Create a new criteria """
  createCriteria(input: CriteriaInput): Criteria
  # User mutations
  createUserAdmin(input: UserInput): User
  authenticateUser(email: String!, password: String!): Token
}
