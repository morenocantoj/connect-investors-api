type Criteria {
  id: ID
  text: String
  key: String
  icon: String
}
type User {
  id: ID
  name: String
  email: String
  role: UserRole
  possible_invest: [CompanyStatus]
  criterias: [CriteriaSelected]
}
type CriteriaAnswer {
  text: String
  key: String
  type: TypeCriteria
  answer: AnswerCriteria
}
type CriteriaSelected {
  text: String
  key: String
  icon: String
  type: TypeCriteria
}
type Company {
  id: ID
  name: String
  ceo_name: String
  url: String
  email: String
  telephone: String
}
type CompanyStatus {
  status: String
  key: String
  company: Company
  answers: [CriteriaAnswer]
}
type AnswersStats {
  answered_y: Int,
  answered_n: Int,
  answered_dn: Int,
  total: Int,
}
type Token {
  token: String
}
enum UserRole {
  ADMIN
  INVESTOR
}
enum TypeCriteria {
  MUST
  SUPER_NICE
  NICE
}
enum AnswerCriteria {
  Y # Yes
  N # No
  DN # ?
}
type Query {
  # Hello World Query in GraphQL
  helloGraphQL: String
  # Criteria queries
  """ Get criterias """
  getCriterias(limit: Int, offset: Int): [Criteria]
  # User queries
  obtainUser: User
  getCompaniesFromInvestor(limit: Int, offset: Int, key: String): [CompanyStatus]
  getUserCompanyCriteriasByType(id: ID!, type: TypeCriteria!): [CriteriaAnswer]
  statsUserCompanyCriteriasByType(id: ID!, type: TypeCriteria): AnswersStats
  # Company queries
  getCompanies(limit: Int, offset: Int): [Company]
  getCompany(id: ID!): Company
}
input CriteriaInput {
  id: ID
  text: String!
  key: String!
  icon: String
}
input UserInput {
  id: ID
  name: String!
  email: String!
  password: String!
  role: UserRole
}
input CompanyInput {
  id: ID
  name: String!
  ceo_name: String!
  url: String!
  email: String!
  telephone: String!
}
type Mutation {
  # Criteria mutations
  """ Create a new criteria """
  createCriteria(input: CriteriaInput): Criteria,
  # User mutations
  """ Create an user with (only admin) """
  createUserAdmin(input: UserInput): User,
  """ Create a new user of type INVESTOR """
  registerInvestor(input: UserInput): User,
  """ Authenticates an user and returns a JSON-Web token """
  authenticateUser(email: String!, password: String!): Token,
  """ Add a Criteria (identified by id) to an user's selected (token) criterias array """
  addCriteriaToUser(id: ID!, type: TypeCriteria!): CriteriaSelected,
  """ Answer a criteria (key) of one company (id) from one user (token)"""
  answerUserCriteria(id: ID!, key: String!, answer: AnswerCriteria!): CriteriaAnswer,
  # Company mutations
  """ Creates a new Company and makes a copy of it in all investor users """
  createCompany(input: CompanyInput): Company,
  """ Deletes a Company from collection """
  deleteCompany(id: ID!): Boolean,
  """ Passes the selected Company (id) from one investor user (token) to first meeting status """
  passCompanyToFirstMeeting(id: ID!): Boolean,
  """ Passes the selected Company (id) from one investor user (token) to discarded status """
  passCompanyToDiscarded(id: ID!): Boolean,
}
